{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ambientLight","AmbientLight","color","intensity","pointLight","PointLight","position","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","trailColor2","trailColor3","trailColor4","material","ambient","diffuse","shininess","specularColor","effects","LightingEffect","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","App","buildings","BUILDINGS","trips","TRIPS","trailLength","initialViewState","mapStyle","theme","loopLength","LOOP_LENGTH","animationSpeed","useState","time","setTime","period","$","css","hours","Math","floor","minutes","seconds","display_time","text","updateTime","num_active_vehicles","METRIC_ANIMATIONS","num_active_passengers","avo","html","toFixed","toString","updateMetricAnimations","animation","animate","t","id","window","requestAnimationFrame","console","log","useEffect","cancelAnimationFrame","trailColors","layers","TripsLayer","data","getPath","d","path","getTimestamps","timestamps","getColor","vendor","opacity","widthMinPixels","rounded","currentTime","shadowEnabled","PolygonLayer","extruded","wireframe","getPolygon","f","polygon","getElevation","height","getFillColor","controller","reuseMaps","preventStyleDiffing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.a6fb05a2.chunk.js","sourcesContent":["/* global window */\nimport React, {useState, useEffect} from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport DeckGL from '@deck.gl/react';\nimport {PolygonLayer} from '@deck.gl/layers';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\nfunction updateMetricAnimations(time) {\n  let num_active_vehicles = METRIC_ANIMATIONS[\"NumOfActiveVehicles\"][time];\n  let num_active_passengers = METRIC_ANIMATIONS[\"NumOfActivePassengers\"][time];\n  let avo = METRIC_ANIMATIONS[\"AVO\"][time];\n  $('#AVO').html(avo.toFixed(2).toString());\n  $('#NumOfActiveVehicles').html(num_active_vehicles.toString());\n  $('#NumOfActivePassengers').html(num_active_passengers.toString());\n};\n\nfunction updateTime(time) {\n  var period = \"AM\";\n  if (time / 3600 >= 12) {\n    period = \"PM\";\n  }\n  if (time / 3600 <= 6 || time / 3600 >= 18) {\n    $('#time').css('background-color', 'black');\n    $('#time').css('color', 'white');\n  }\n  else {\n    $('#time').css('background-color', 'white');\n    $('#time').css('color', 'black');\n  }\n\n  var hours = Math.floor(time / 3600) % 12;\n  var minutes = Math.floor(time / 60) % 60;\n  var seconds = time % 60;\n\n  if (hours == 0) hours = 12;\n  hours = hours < 10 ? `0${hours}` : hours;\n  minutes = minutes < 10 ? `0${minutes}` : minutes;\n  seconds = seconds < 10 ? `0${seconds}` : seconds;\n\n  var display_time = `${hours}:${minutes}:${seconds} ${period}`;\n  $('#time').text(display_time);\n};\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [-74.762758, 40.226667, 8000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n};\n\nconst DEFAULT_THEME = {\n  buildingColor: [255, 255, 255],\n  trailColor0: [255, 0, 0],\n  trailColor1: [173, 216, 230],\n  trailColor2: [0, 0, 139],\n  trailColor3: [144, 238, 144],\n  trailColor4: [0, 100, 0],\n  material,\n  effects: [lightingEffect]\n};\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -74.762758,\n  latitude: 40.226667,\n  zoom: 12,\n  pitch: 45,\n  bearing: 0\n};\n\nconst MAP_STYLE = 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json';\n\nfunction App({\n  buildings = BUILDINGS,\n  trips = TRIPS,\n  trailLength = 5,\n  initialViewState = INITIAL_VIEW_STATE,\n  mapStyle = MAP_STYLE,\n  theme = DEFAULT_THEME,\n  loopLength = LOOP_LENGTH, // unit corresponds to the timestamp in source data\n  animationSpeed = 1\n}) {\n  const [time, setTime] = useState(0);\n  updateTime(time);\n  updateMetricAnimations(time);\n  const [animation] = useState({});\n\n  const animate = () => {\n    setTime(t => (t + animationSpeed) % loopLength);\n    animation.id = window.requestAnimationFrame(animate);\n    console.log(animation);\n  };\n\n  useEffect(\n    () => {\n      animation.id = window.requestAnimationFrame(animate);\n      return () => window.cancelAnimationFrame(animation.id);\n    },\n    [animation]\n  );\n\n  const trailColors = [theme.trailColor0, theme.trailColor1, theme.trailColor2, theme.trailColor3, theme.trailColor4];\n  const layers = [\n    new TripsLayer({\n      id: 'trips',\n      data: trips,\n      getPath: d => d.path,\n      getTimestamps: d => d.timestamps,\n      getColor: d => trailColors[d.vendor],\n      opacity: 0.8,\n      widthMinPixels: 5,\n      rounded: true,\n      trailLength,\n      currentTime: time,\n\n      shadowEnabled: false\n    }),\n    new PolygonLayer({\n      id: 'buildings',\n      data: buildings,\n      extruded: true,\n      wireframe: false,\n      opacity: 0.5,\n      getPolygon: f => f.polygon,\n      getElevation: f => f.height,\n      getFillColor: theme.buildingColor,\n      material: theme.material\n    })\n  ];\n\n  return (\n    <DeckGL\n      layers={layers}\n      effects={theme.effects}\n      initialViewState={initialViewState}\n      controller={true}\n    >\n      <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing={true} />\n    </DeckGL>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}